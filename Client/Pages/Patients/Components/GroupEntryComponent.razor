<MudPaper Class="d-flex ma-2 pa-2 flex-column" Elevation="2">
    <MudText class="d-flex" Typo="Typo.h6">@Group.Label</MudText>
    <div style="min-width: 330px;">
        <MudExpansionPanels DisableBorders="true" Dense="true">
            @foreach (var task in Group.Tasks) {
                @switch (task.Type) {
                    <!-- CheckBox FIELD -->
                    case TaskType.Bool:
                        var check = task as CheckboxDisplay;
                        <MudPaper Class="d-flex justify-content-between mt-1" Outlined="true">
                            <MudText Class="d-inline-flex align-self-center pl-2">@task.Label</MudText>
                            <MudCheckBox T="bool" Checked="@check.IsChecked"
                             CheckedChanged="@((value) => {check.IsChecked = value; UpdatePatientTask(check, value ? "true" : "false");})" />
                        </MudPaper>
                        break;
                    <!-- TEXT FIELD -->
                    case TaskType.Text:
                        var result = task as TextDisplay;
                        <MudPaper Class="d-flex justify-content-between mt-1" Outlined="true">
                            <MudText Class="d-inline-flex align-self-center px-2">@result.Label</MudText>
                            <MudTextField Class="d-inline-flex align-self-center px-2 text-align-right"
                              Style="margin-left:auto;padding-bottom:16px;height:24px;"
                              Variant="Variant.Filled" DisableUnderLine="true" Margin="Margin.Dense"
                              T="string" Text="@result.Value" TextChanged="@((value) => { if(result.Value !=value){ result.Value = value; UpdatePatientTask(result, value);}})" />
                        </MudPaper>
                        break;
                    <!-- NUMBER FIELD -->
                    case TaskType.Number:
                        var number = task as NumberDisplay;
                        <MudTooltip Text="@(Group.Label + Group.Tasks.IndexOf(task))" Arrow="true" Placement="Placement.Left">
                            <MudPaper Class="d-flex justify-content-between mt-1" Outlined="true">
                                <MudText Class="d-inline-flex align-self-center pl-2">@number.Label</MudText>
                                <MudNumericField Class="d-inline-flex align-self-center px-2 text-align-right"
                                     Style="text-align:right;padding-bottom:16px;height:24px;"
                                     Variant="Variant.Filled" DisableUnderLine="true" Margin="Margin.Dense"
                                     HideSpinButtons="true" T="double" Value="@number.NumberValue"
                                     ValueChanged="@((value) => {number.NumberValue = value; UpdatePatientTask(number, value.ToString());})" />
                            </MudPaper>
                        </MudTooltip>
                        break;
                    <!-- FORMULA FIELD -->
                    case TaskType.Calculation:
                        var formula = task as FormulaDisplay;
                        <MudExpansionPanel Class="mt-2" HideIcon="true" Dense="true">
                            <TitleContent>
                                <MudPaper Class="d-flex justify-content-between ma-0" Outlined="true">
                                    <MudText Class="d-inline-flex align-self-center pl-2">@formula.Label</MudText>
                                    <MudText Class="d-inline-flex align-self-center px-2 text-align-right"
                                 Style="margin-left:auto;padding-bottom:16px;height:24px;"><b>@formula.Calculate()</b></MudText>
                                </MudPaper>
                            </TitleContent>
                            <ChildContent>
                                <MudPaper Class="d-flex justify-content-between mt-1" Elevation="0">
                                    <MudText Class="d-inline-flex align-self-center px-2">Formula: </MudText>
                                    <MudTextField Class="d-inline-flex align-self-center px-2 text-align-right"
                                      Style="text-align:right;padding-bottom:16px;height:24px;"
                                      Variant="Variant.Filled" DisableUnderLine="true" Margin="Margin.Dense"
                                      T="string" Text="@formula.Value"
                                      TextChanged="@((value) => { if(formula.Value !=value){ formula.Value = value; UpdatePatientTask(formula, value);}})" />
                                </MudPaper>
                            </ChildContent>
                        </MudExpansionPanel>
                        <!-- TODO: Add expansion panel to allow editing the values -->
                        break;
                    <!-- DATE FIELD -->
                    case TaskType.Date:
                        var date = task as DateDisplay;
                        <MudPaper Class="d-flex justify-content-between mt-1" Outlined="true">
                            <MudText Class="d-inline-flex flex-grow-1 align-self-center px-2 ">@date.Label</MudText>
                            <MudDatePicker Class="d-inline-flex align-self-center px-2 text-align-right" AutoClose="true"
                               Style="padding-bottom:12px;height:36px;width:200px" Margin="Margin.Dense" Variant="Variant.Filled" T="DateTime"
                               Date="@date.DateValue" DateChanged="@((value) => { date.DateValue = value; UpdatePatientTask(date, value.Value.ToShortDateString());})" />
                        </MudPaper>
                        break;
                    <!-- LIST FIELD -->
                    case TaskType.List:
                        var list = task as ListDisplay;
                        <MudPaper Class="d-flex justify-content-between mt-1" Outlined="true">
                            <MudText Class="d-inline-flex flex-grow-1 align-self-center px-2" T="string">@list.Label</MudText>
                            <MudSelect Class="d-inline-flex flex-grow-1  px-2 pb-14" Style="height:40px;" TransformOrigin="Origin.CenterCenter"
                           T="string" Value="@list.SelectedOption"
                           ValueChanged="@((value) => { list.SelectedOption = value; UpdatePatientTask(list, list.Value);})">
                                @foreach (var option in list.Options) {
                                    <MudSelectItem Value="@(option)">@option</MudSelectItem>
                                }
                            </MudSelect>
                        </MudPaper>
                        break;
                    <!-- UNDEFINED -->
                    default:
                        <MudExpansionPanel Class="mt-2" HideIcon="true" Dense="true">
                            <TitleContent>
                                <MudPaper Class="d-flex justify-content-between ma-0" Outlined="true">
                                    <MudText Class="d-inline-flex align-self-center pl-2">@task.Label</MudText>
                                    <MudCheckBox T="bool" />
                                </MudPaper>
                            </TitleContent>
                            <ChildContent>
                                <MudPaper Class="d-flex flex-column align-items-stretch pa-1">
                                    <MudText>Last Edit: 01-JAN-2023</MudText>
                                    <MudTextField T="string" Variant="Variant.Outlined" Label="Comments" Lines="5"></MudTextField>
                                </MudPaper>
                            </ChildContent>
                        </MudExpansionPanel>
                        break;
                }
            }
        </MudExpansionPanels>
    </div>
</MudPaper>

<style>
    .text-align-right input{
        text-align: right;
    }
</style>