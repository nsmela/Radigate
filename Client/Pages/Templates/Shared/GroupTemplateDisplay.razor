﻿<MudPaper Class="ma-2 pb-2" Style="@($"background:{Colors.BlueGrey.Darken1};")" MinWidth="320px">
    <!-- Tool bar at top -->
    @if (!Editing) {
        <MudToolBar DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken2};")">
            <MudText Typo="Typo.h5" Class="pl-2">@newGroup.Label</MudText>
            <MudSpacer />
            <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight"
                 ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit" OnClick="@(()=> Editing = true)">
                    Edit Group
                </MudButton>
                <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Filled.RemoveCircle" OnClick=@RemoveGroup>
                    Remove Group
                </MudButton>
            </MudMenu>
        </MudToolBar>
    }
    else {
        if (editLabelOpen) {
            <MudToolBar DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken2};")">
                <MudTextField @bind-Value="newGroup.Label" Placeholder="@newGroup.Label" Class="pa-2 mb-2 mt-2"
                      Typo="Typo.h5" Variant="Variant.Filled" Immediate="false" TextChanged=@SubmitGroupNameEdit />
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Rounded.Edit" Size="Size.Small" OnClick=@SubmitGroupNameEdit />
            </MudToolBar>
        }
        else {
            <MudToolBar DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken2};")">
                <MudText Typo="Typo.h5" Class="pl-2">@newGroup.Label</MudText>
                <MudSpacer />
                <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight"
                 ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                    <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit" OnClick=@OpenNameEditing>
                        Rename Section
                    </MudButton>
                </MudMenu>
            </MudToolBar>
        }
    }

    <!-- Tasks -->
    @foreach (var task in newGroup.TaskList()) {
        <TaskEditBase GroupChanged="@OnGroupUpdated" Editing="@Editing" />
    }
    @if (Editing) {
        if (newTaskOpen) {
            <MudPaper Outlined="true" Class="ma-1 pa-1">
                <MudTextField @bind-Value="newTaskLabel" Placeholder="New Task" DisableUnderLine="true" />
                <MudButton FullWidth="true" OnClick=@SubmitNewTask> Add Task </MudButton>
            </MudPaper>
        }
        else {
            <MudButton FullWidth="true" OnClick="@(() => { newTaskOpen = true;})"> New Task </MudButton>
        }
        <MudButton FullWidth="true" OnClick="@(() => Reset())"> Reset </MudButton>
        <MudButton FullWidth="true" OnClick="@(() => SaveChanges())"> Save </MudButton>
    }

</MudPaper>


@code {
    [Parameter] public GroupTemplate Template { get; set; }
    [Parameter] public bool Edit { get; set; } = false;
    [Parameter] public EventCallback<TaskGroup> GroupChanged { get; set; }

    GroupTemplate newGroup;

    bool Editing { get; set; } = false;

    bool editMode = false;
    bool newTaskOpen = false;
    bool editLabelOpen = false;
    string newTaskLabel = string.Empty;

    protected override async Task OnParametersSetAsync() {
        newGroup = Template;
    }

    //functions
    async Task OpenNameEditing() {
        editLabelOpen = true;
        editMode = false;
    }

    async Task Reset() {
        newGroup = Template;
    }

    async Task SubmitGroupNameEdit() {
        if (!editMode) { editMode = true; return; } //to offset the first time TextvalueChanged is triggered

        //all changes are automaticaly bound to Group.Label, so we only need to close the textfield and submit

        editMode = false;
        editLabelOpen = false;
    }

    async Task RemoveGroup() {
    }

    async Task SubmitNewTask() {
    }

    async Task SaveChanges() {

    }

    //callbacks
    private async Task OnGroupUpdated(TaskGroup group) {
    }

}