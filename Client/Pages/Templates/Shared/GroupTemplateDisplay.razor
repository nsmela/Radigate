﻿<MudPaper Class="ma-2 pb-2" Style="@($"background:{Colors.BlueGrey.Darken1};")" MinWidth="320px">
    <!-- Tool bar at top -->
    @if (!Edit) {
        <MudToolBar DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken2};")">
            <MudText Typo="Typo.h4" Class="pl-2">@newGroup.Label</MudText>
            <MudSpacer />
            <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight"
                 ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit" OnClick=@OpenNameEditing>
                    Edit Group
                </MudButton>
                <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Filled.RemoveCircle" OnClick=@RemoveGroup>
                    Remove Group
                </MudButton>
            </MudMenu>
        </MudToolBar>
    } else {
        <MudToolBar DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken2};")">
            <MudTextField @bind-Value="newGroup.Label" Placeholder="@newGroup.Label" Class="pa-2 mb-2 mt-2"
                    Typo="Typo.h4" Variant="Variant.Filled" Immediate="false" TextChanged=@SubmitGroupNameEdit />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Rounded.Edit" OnClick=@SubmitGroupNameEdit />
        </MudToolBar>
     }
    
     
    <!-- Tasks -->
    @foreach (var task in newGroup.TaskList()) {
        <TaskEditBase Task="@task" Group="@newGroup" Editing="@Edit" GroupChanged="@OnGroupUpdated"/>
    }
    @if (Edit) {
        <MudButton FullWidth="true" OnClick=@NewTask> New Task </MudButton>
        <MudButton FullWidth="true" OnClick=@Reset> Reset </MudButton>
        <MudButton FullWidth="true" OnClick="@SaveChanges"> Save </MudButton>
        @if (IsNew) {
            <MudButton FullWidth="true" OnClick=@CancelChanges> Cancel </MudButton>
        }
    }

</MudPaper>


@code {
    //private variables
    GroupTemplate newGroup = new();

    //inject properties

    //parameter properties
    [Parameter] 
    public GroupTemplate Template { get; set; }
    [Parameter] 
    public bool Edit { get; set; } = false;
    [Parameter] 
    public bool IsNew { get; set; } = false;
    [Parameter] 
    public EventCallback<TaskGroup> GroupChanged { get; set; }

    //public methods and properties

    //internal and protected Methods/Properties
    protected override async Task OnParametersSetAsync() {
        if(IsNew){
            Template = new();
            Edit = true;
        }
        newGroup = Template;
    }

    //Private methods/properties
    private async Task OpenNameEditing() {
    }

    private async Task Reset() {
        newGroup = Template;
    }

    private async Task SubmitGroupNameEdit() {
    }

    private async Task OpenNewTask(){

    }

    private async Task NewTask() {
        newGroup.Tasks += "New Task,0;";
    }

    private async Task RemoveGroup() {
    }

    private async Task SubmitNewTask() {
    }

    private async Task SaveChanges() {

    }

    private async Task CancelChanges(){

    }

    //callbacks
    private async Task OnGroupUpdated(GroupTemplate template) {
        newGroup = template;
    }

}