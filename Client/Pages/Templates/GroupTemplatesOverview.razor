@page "/templates/groups/"
@attribute [Authorize]
@inject AuthenticationStateProvider AuthState
@inject ITemplateService TemplateService
@using Radigate.Client.Pages.Templates.Shared


<MudPaper MaxWidth="660px" Class="ma-2">
    <MudStack Row="true">
        <MudButton Variant="Variant.Outlined" Color="Color.Success" IconSize="Size.Small" 
            StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddGroup">Add Group </MudButton>
        <MudTextField Class="align-self-center" T="string" Label="Search" Variant="Variant.Outlined" 
            Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />
    </MudStack>
</MudPaper>

<MudItem Class="pa-1 align-items-baseline">
        <!-- Existing Groups -->
        <MudStack Row=@true>
            <!-- New Group -->
            @if (newGroupOpen) {
                <GroupTemplateDisplay IsNew="true" />
             }
            <!-- Template List -->
            @if(isLoading){
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            } else if(groups is null || groups.Count < 1){
                <span>@message</span>
            }else{
                @foreach (var group in groups) {
                    <GroupTemplateDisplay Template="@group" Edit="false" />
                }
            }
        </MudStack>
    
</MudItem>
@code {
    bool isLoading = true;

    List<GroupTemplate> groups;
    string message = string.Empty;
    string newGroupLabel = string.Empty;
    string newTaskLabel = string.Empty;
    int newTaskType = -1;
    
    protected override async Task OnInitializedAsync(){
        await GetGroupTemplates();
        isLoading = false;
    }

    List<Tuple<string, int>> newTasks { get; set; } = new();
    bool newGroupOpen { get; set; } = false;

    private async Task GetGroupTemplates() {
        var response = await TemplateService.GetAllGroupTemplatesAsync();

        //request failed
        if (!response.Success) {
            message = response.Message;
            return;
        }

        //no groups in the database to show
        if (response.Data is null || response.Data.Count < 1) {
            message = "no entries!";
            return;
        }

        message = string.Empty;
        groups = new();
        foreach (var group in response.Data) groups.Add(group);
    }

    private async Task OpenAddGroup() => newGroupOpen = true;

    private async Task AddTask() {
        if (string.IsNullOrEmpty(newTaskLabel)) return;
        if (newTaskType < 0) return;

        newTasks.Add(new Tuple<string, int>(newTaskLabel, newTaskType));
        newTaskLabel = string.Empty;
        newTaskType = -1;
    }

    private async Task RemoveTask(Tuple<string, int> task){
        newTasks.Remove(task);
    }

    private async Task AddGroup(){
        if (string.IsNullOrEmpty(newGroupLabel)) return;

        var group = new NewGroupTemplate {
            Label = newGroupLabel,
            Tasks = GroupTemplate.TasksToString(newTasks)
        };

        var response = await TemplateService.AddGroupTemplate(group);
        if (!response.Success){
            message = response.Message;
            return;
        }

        CancelGroup();
        GetGroupTemplates();
    }

    private async Task CancelGroup(){
        newTasks = new();
        newGroupLabel = string.Empty;
        newGroupOpen = false;
    }

    private async Task OnGroupChanged(TaskGroup group) {
    }
}
