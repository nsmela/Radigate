@using static Radigate.Client.Pages.Templates.Components.TemplateGroupComponent.TemplateGroupCallback
@using static Radigate.Client.Pages.Templates.Components.TemplateGroupComponent

<MudPaper Width="560px" Class="ma-2" Outlined="true" Style="@($"background:{Colors.Teal.Darken4};")">
    <MudToolBar DisableGutters="true">
        @if (Editing) { 
            <MudTextField @bind-Value="Label" Placeholder="@Label" Class="pa-2 mb-2 mt-2"
                Typo="Typo.h5" Variant="Variant.Filled" Immediate="false" />
            <MudSpacer />
            
        }else {
            <MudText Typo="Typo.h4" Class="pl-1">@Label</MudText>
            <MudSpacer />
            <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight"
                 TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                <MudButton Size="Size.Small" Color="Color.Success" StartIcon="@Icons.Material.Filled.PersonAddAlt1">Create Patient</MudButton>
                <MudButton Size="Size.Small" Color="Color.Info" StartIcon="@Icons.Material.Filled.Edit" OnClick=@EditTemplate>Open Template</MudButton>
                <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Filled.RemoveCircle" OnClick=@RemoveTemplate>Remove Template</MudButton>
            </MudMenu>
        }

    </MudToolBar>

    <!-- Groups -->
    @foreach(var group in NewGroups){
        <TemplateGroupComponent Edit="@IsOpenToEdit(group)" Template="@group" GroupChanged="OnGroupChanged" />
    }

    <!-- Template Controls -->
    @if (Editing) {
        <MudStack Rows="true" Spacing="1">
            <!-- Add Group Interface -->
            @if(IsNewGroupOpen){
                <MudPaper Outlined="true" Class="ma-1 pa-1" >
                    <MudToolBar>
                        <MudAutocomplete T="string" Label="New Group Name" @bind-Value="NewGroupLabel" CoerceText="true" CoerceValue="true"
                                 ResetValueOnEmptyText="true" SearchFunc="@SearchGroupNames" />
                        <MudSpacer/>
                        <MudButton OnClick="@SubmitNewGroup"> Add </MudButton>
                        <MudButton OnClick="@CancelNewGroup"> Cancel </MudButton>
                    </MudToolBar>
                </MudPaper>
            }else {
                <MudButton OnClick="@OpenNewGroup"> New Group </MudButton>
            }
            <MudButton OnClick=@ResetTemplate> Reset </MudButton>
            <MudButton OnClick=@SaveTemplate> Save </MudButton>
        </MudStack>
    }
</MudPaper>

@code {
    //https://github.com/Apps72/BlazorGuidelines
    #region Private Variables

    #endregion

    #region [Inject] Properties
    [Inject]
    private ITemplateService Templates { get; set; } = default!;
    #endregion

    #region [Parameter] Properties
    [Parameter]
    public PatientTemplate Template { get; set; }

    [Parameter]
    public bool Editing { get; set; } = false;

    [Parameter]
    public EventCallback<TemplatePatientCallback?> TemplateChanged { get; set; }

    #endregion

    #region Public Methods and Properties
    public class TemplatePatientCallback {
        public PatientTemplate Template {get;set;} = new();
        public RequestType Request { get; set; } = RequestType.CANCEL;
        public enum RequestType {OPEN, CANCEL, SAVE, ADD, DELETE}
    }
    #endregion

    #region Internal and Protected Methods and Properties
    protected override async Task OnParametersSetAsync() {
        Label = new string(Template.Label);
        NewGroups = new();
        Template.GroupTemplates.ForEach(g => NewGroups.Add(new GroupTemplate(g)));
    }
    #endregion

    #region Private Methods and Properties
    private string Label { get; set; } = string.Empty;

    private List<GroupTemplate> NewGroups { get; set; } = new();
    private bool IsNewGroupOpen { get; set; } = false;
    private string NewGroupLabel { get; set; } = string.Empty;
    private int EditingGroupIndex { get; set; } = -1;

    private bool IsOpenToEdit(GroupTemplate group) => EditingGroupIndex == NewGroups.IndexOf(group);

    private async Task ResetTemplate(){
        Label = new string(Template.Label);
        NewGroups = new();
        Template.GroupTemplates.ForEach(g => NewGroups.Add(new GroupTemplate(g)));
    }

    private async Task EditTemplate(){
        var callback = new TemplatePatientCallback{
            Template = this.Template,
            Request = TemplatePatientCallback.RequestType.OPEN
        };

        await TemplateChanged.InvokeAsync(callback);
    }

    private async Task SaveTemplate(){
        //is this a new template or updating an older template?
        bool isNew = Template.Id < 0;

        var callback = new TemplatePatientCallback {
            Template = new PatientTemplate {
                Id = Template.Id,
                CreatedAt = Template.CreatedAt,
                Label = this.Label,
                GroupTemplates = this.NewGroups
            },
            Request = isNew ? TemplatePatientCallback.RequestType.ADD : TemplatePatientCallback.RequestType.SAVE
        };

        await TemplateChanged.InvokeAsync(callback);
    }

    private async Task RemoveTemplate(){
        var callback = new TemplatePatientCallback {
            Template = Template,
            Request = TemplatePatientCallback.RequestType.DELETE
        };

        await TemplateChanged.InvokeAsync(callback);
    }

    private async Task<IEnumerable<string>> SearchGroupNames(string value) {
        if (Templates.GroupNames is null || Templates.GroupNames.Count < 1) return new List<string>();
        if (string.IsNullOrEmpty(value)) return Templates.GroupNames;

        var result = Templates.GroupNames.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        return result;
    }

    private async Task OpenNewGroup(){
        IsNewGroupOpen = true;
    }

    private async Task SubmitNewGroup(){
        if (string.IsNullOrEmpty(NewGroupLabel)) return;

        //use an existing group
        var group = Templates.Groups.Find(g => g.Label == NewGroupLabel);
        if (group is not null) { //link the group?
            group.Public = false;
            NewGroups.Add(new GroupTemplate(group));
        }
        else {
            NewGroups.Add(new GroupTemplate {
                Label = NewGroupLabel,
                Tasks = string.Empty,
                Public = false
            });
        }

        NewGroupLabel = string.Empty;
    }

    private async Task CancelNewGroup(){
        IsNewGroupOpen = false;
        NewGroupLabel = string.Empty;
    }

    private async Task OnGroupChanged(TemplateGroupCallback template) {
        switch (template.Request) {
            case RequestType.OPEN:
                if (Editing){
                    EditingGroupIndex = NewGroups.FindIndex(g => g.Label == template.Group.Label);
                }
                return;
            case RequestType.CANCEL:
                EditingGroupIndex = -1;
                return;
            case RequestType.SAVE:
                if(EditingGroupIndex >=0) NewGroups[EditingGroupIndex] = template.Group;
                else NewGroups.Add(template.Group);
                EditingGroupIndex = -1;
                return;
            case RequestType.DELETE:
                var index = NewGroups.FindIndex(g => g.Label == template.Group.Label);
                if (index < 0) return;
                NewGroups.RemoveAt(index);
                EditingGroupIndex = -1;
                return;
            case RequestType.ADD:
                return;
            default:
                return;
        }
    }
    #endregion
}
