@using Radigate.Client.Components.Tasks

<MudPaper>
    ﻿@if (!Editing) {
        <MudToolBar Class="pa-2 mb-1" DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken3};")" Dense="true">
            <MudIcon Icon="@Icon" Size="Size.Small" />
            <MudText Typo="Typo.body1" Class="pl-2">@Label</MudText>
        </MudToolBar>
    }
    else {
        <MudToolBar Class="pa-2 mb-1" DisableGutters="true" Dense="true" Style="@($"background:{Colors.BlueGrey.Darken3};")">
            <TaskTypeSelectionComponent @bind-TaskTypeItem="TypeBound" />
            <MudInput @bind-Value="Label" Placeholder="@Label" Margin="Margin.Normal" Class="mb-n2 mt-n2 pr-8n pl-1 pt-1"
                    Variant="Variant.Filled" Immediate="false" TextChanged="@(()=> SubmitTaskEdit())" FullWidth="true" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Size="Size.Small" OnClick="@(() => IncrementTask())" />
            <MudIconButton Icon="@Icons.Material.Sharp.KeyboardArrowDown" Size="Size.Small" OnClick="@(() => DecrementTask())" />
            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.RemoveCircle" Size="Size.Small" OnClick="@RemoveTask" />
        </MudToolBar>
        @if (Type == TaskType.List)
        {
            <MudDivider />
            @foreach(var option in ListItems){
                <MudStack Row="true">
                    <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.RemoveCircle" Size="Size.Small" OnClick="@(() => RemoveOption(option))" />
                    <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Size="Size.Small" OnClick="@(() => IncrementOption(option))" />
                    <MudIconButton Icon="@Icons.Material.Sharp.KeyboardArrowDown" Size="Size.Small" OnClick="@(() => DecrementOption(option))" />
                    <MudText Class="ml-2">@option</MudText> 

                </MudStack>
            }
            <MudIconButton Color="Color.Success" Icon="@Icons.Material.Filled.AddCircle" Size="Size.Small" OnClick="@AddOption" />
        }
    }
</MudPaper>

@code {
    [Parameter]
    public Tuple<string, int>? Task { get; set; }
    [Parameter]
    public List<Tuple<string, int>>? Group { get; set; }
    [Parameter]
    public bool Editing { get; set; } = false;
    [Parameter]
    public EventCallback<List<Tuple<string, int>>> GroupChanged { get; set; } = new();

    protected override async Task OnParametersSetAsync() {
        if (Task is null) Task = new Tuple<string, int>(string.Empty, -1);
        if (Group is null) Group = new();
        ListItems = new();

        Type = (TaskType)int.Parse(Task.Item2.ToString());

        if(TaskType.List == Type){
            var list = GroupTemplate.TaskListToList(Task);
            Label = list[0];
            list.RemoveAt(0);

            foreach (var option in list) ListItems.Add(option);
        }else {
            Label = Task.Item1;
        }
    }

    private string Label { get; set; } = string.Empty;
    private List<string> ListItems { get; set; } = new();
    private TaskType Type { get; set; } = default!;
    private TaskType TypeBound {
        get => this.Type;
        set {
            this.Type = value;
            SubmitTaskEdit();
        }
    }

    private string Icon => TaskTypeExtensions.ToIcon(Type);

    private TaskType[] TaskTypes => ((TaskType[])Enum.GetValues(typeof(TaskType))).SkipLast(1).ToArray(); //last entry is Base, a count type
    private string TaskToIcon(TaskType type) => TaskTypeExtensions.ToIcon(type);
    private string TaskToLabel(TaskType type) => Enum.GetName(typeof(TaskType), type);
    private Tuple<string, int> NewTask => new Tuple<string, int>(Label, (int)Type);

    #region Button Functions
    private async Task SelectType(TaskType type) {
        Type = type;

        SubmitTaskEdit();
    }


    private async Task IncrementTask() {
        var taskIndex = Group.IndexOf(Task);
        if (taskIndex <= 0) return;

        Group.RemoveAt(taskIndex);
        taskIndex--;
        Group.Insert(taskIndex, NewTask);

        await GroupChanged.InvokeAsync(Group);
    }

    private async Task DecrementTask() {
        var taskIndex = Group.IndexOf(Task);
        if (taskIndex < 0 || taskIndex > Group.Count - 2) return;

        Group.RemoveAt(taskIndex);
        taskIndex++;
        Group.Insert(taskIndex, NewTask);

        await GroupChanged.InvokeAsync(Group);
    }

    private async Task RemoveTask() {
        Group.Remove(Task);

        await GroupChanged.InvokeAsync(Group);
    }

    private async Task SubmitTaskEdit() {
        var taskIndex = Group.IndexOf(Task);
        if (taskIndex < 0) return;
        Group[taskIndex] = NewTask;

        await GroupChanged.InvokeAsync(Group);
    }

    private async Task AddOption(){
        ListItems.Add($"Option {ListItems.Count}");
    }

    private async Task RemoveOption(string option){
        int index = ListItems.IndexOf(option);
        if (index < 0) return;

        ListItems.RemoveAt(index);
    }
    private async Task IncrementOption(string option){
        int index = ListItems.IndexOf(option);
        if (index < 1) return;

        ListItems.RemoveAt(index);
        index--;
        ListItems.Insert(index, option);
    }

    private async Task DecrementOption(string option){
        int index = ListItems.IndexOf(option);
        if (index > ListItems.Count - 2) return;
        ListItems.RemoveAt(index);
        index++;
        ListItems.Insert(index, option);
    }
    #endregion

}