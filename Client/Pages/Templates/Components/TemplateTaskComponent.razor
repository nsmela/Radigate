@using Radigate.Client.Components.Tasks

﻿@if (!Editing) {
    <MudToolBar Class="pa-2 ma-1" DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken3};")" Dense="true">
        <MudIcon Icon="@Icon" Size="Size.Small" />
        <MudText Typo="Typo.body1" Class="pl-2">@Label</MudText>
    </MudToolBar>
}
else {
    <MudToolBar Class="pa-2 ma-1" DisableGutters="true" Dense="true" Style="@($"background:{Colors.BlueGrey.Darken3};")">
        <TaskTypeSelectionComponent @bind-TaskTypeItem="TypeBound" />
        <MudInput @bind-Value="Label" Placeholder="@Label" Margin="Margin.Normal" Class="mb-n2 mt-n2 pr-8n pl-1 pt-1"
              Variant="Variant.Filled" Immediate="false" TextChanged=@(()=> SubmitTaskEdit()) FullWidth="true" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Size="Size.Small" OnClick="(() => IncrementTask())" />
        <MudIconButton Icon="@Icons.Material.Sharp.KeyboardArrowDown" Size="Size.Small" OnClick="(() => DecrementTask())" />
        <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.RemoveCircle" Size="Size.Small" OnClick="@RemoveTask" />
    </MudToolBar>

}
@code {
    [Parameter]
    public Tuple<string, int>? Task { get; set; }
    [Parameter]
    public List<Tuple<string, int>>? Group { get; set; }
    [Parameter]
    public bool Editing { get; set; } = false;
    [Parameter]
    public EventCallback<List<Tuple<string, int>>> GroupChanged { get; set; } = new();

    protected override async Task OnParametersSetAsync() {
        if (Task is null) Task = new Tuple<string, int>(string.Empty, -1);
        if (Group is null) Group = new();

        Label = Task.Item1;
        Type = (TaskType)int.Parse(Task.Item2.ToString());
    }

    string Label { get; set; } = string.Empty;
    private TaskType Type { get; set; } = default!;
    private TaskType TypeBound {
        get => this.Type;
        set {
            this.Type = value;
            SubmitTaskEdit();
        }
    }

    string Icon => TaskTypeExtensions.ToIcon(Type);

    private TaskType[] TaskTypes => ((TaskType[])Enum.GetValues(typeof(TaskType))).SkipLast(1).ToArray(); //last entry is Base, a count type
    private string TaskToIcon(TaskType type) => TaskTypeExtensions.ToIcon(type);
    private string TaskToLabel(TaskType type) => Enum.GetName(typeof(TaskType), type);
    private Tuple<string, int> NewTask => new Tuple<string, int>(Label, (int)Type);

    #region Button Functions
    private async Task SelectType(TaskType type) {
        Type = type;

        SubmitTaskEdit();
    }


    private async Task IncrementTask() {
        var taskIndex = Group.IndexOf(Task);
        if (taskIndex <= 0) return;

        Group.RemoveAt(taskIndex);
        taskIndex--;
        Group.Insert(taskIndex, NewTask);

        await GroupChanged.InvokeAsync(Group);
    }

    private async Task DecrementTask() {
        var taskIndex = Group.IndexOf(Task);
        if (taskIndex < 0 || taskIndex > Group.Count - 2) return;

        Group.RemoveAt(taskIndex);
        taskIndex++;
        Group.Insert(taskIndex, NewTask);

        await GroupChanged.InvokeAsync(Group);
    }

    private async Task RemoveTask() {
        Group.Remove(Task);

        await GroupChanged.InvokeAsync(Group);
    }

    private async Task SubmitTaskEdit() {
        var taskIndex = Group.IndexOf(Task);
        if (taskIndex < 0) return;
        Group[taskIndex] = NewTask;

        await GroupChanged.InvokeAsync(Group);
    }

    #endregion

}