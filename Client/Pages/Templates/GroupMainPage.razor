@page "/templates/group-main"
@implements IDisposable
@attribute [Authorize]
@using Radigate.Client.Pages.Templates.Components
@using static Radigate.Client.Pages.Templates.Components.TemplateGroupComponent.TemplateGroupCallback


<MudPaper MaxWidth="660px" Class="ma-2">
    <MudStack Row="true" Class="pa-2 overflow-x-scroll">
        <MudButton Variant="Variant.Outlined" Color="Color.Success" IconSize="Size.Small"
                   StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddGroup">Add Group </MudButton>
        <MudTextField Class="align-self-center" T="string" Label="Search" Variant="Variant.Outlined"
                      Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />
    </MudStack>
</MudPaper>

<MudItem Class="pa-1 align-items-baseline">
    <!-- Existing Groups -->
    <MudStack Row=@true>
        <!-- New Group -->
        @if (newGroupOpen) {
            <TemplateGroupComponent GroupChanged="@OnGroupChanged" Edit="@newGroupOpen" />
        }
        <!-- Template List -->
        @if (isLoading) {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        else if (Groups is null || Groups.Count < 1) {
            <span>No Groups Found</span>
        }
        else {
            @foreach (var group in Groups) {
                <TemplateGroupComponent Template="@group" IsEditing="@IsEditing(group.Id)" IsEditable="true" GroupChanged="@OnGroupChanged" />
            }
        }
    </MudStack>

</MudItem>
@code {
    //https://github.com/Apps72/BlazorGuidelines

    bool isLoading = true;

    string message = string.Empty;
    int groupEditId = -1;

    [Inject]
    private AuthenticationStateProvider AuthState { get; set; } = default!;
    [Inject]
    private ITemplateService TemplateService { get; set; } = default!;

    protected override async Task OnInitializedAsync() {
        await TemplateService.GetAllGroupTemplatesAsync();
        isLoading = false;
        TemplateService.OnChange += StateHasChanged;
    }

    public void Dispose(){
        TemplateService.OnChange -= StateHasChanged;
    }

    bool newGroupOpen { get; set; } = false;

    private List<GroupTemplate> Groups => TemplateService.Groups;
    private async Task OpenAddGroup() => newGroupOpen = true;

    private async Task CancelGroup() => newGroupOpen = false;
    private bool IsEditing(int groupId) => groupId == groupEditId;

    private async Task OnGroupChanged(TemplateGroupComponent.TemplateGroupCallback? group) {
        //closing all editing
        newGroupOpen = false;
        groupEditId = -1;

        switch (group.Request) {
            case RequestType.OPEN:
                groupEditId = group.GroupId.Value;
                return;
            case RequestType.CANCEL:
                return;
            case RequestType.SAVE:
                group.Group.Public = true;
                await TemplateService.UpdateGroupTemplate(group.Group);
                return;
            case RequestType.DELETE:
                await TemplateService.DeleteGroupTemplate(group.GroupId.Value);
                return;
            case RequestType.ADD:
                var newGroup = new NewGroupTemplate {
                    Label = group.Group.Label,
                    Tasks = group.Group.Tasks,
                    IsPublic = true
                };

                await TemplateService.AddGroupTemplate(newGroup);
                return;
            default:
                return;
        }
    }
}

