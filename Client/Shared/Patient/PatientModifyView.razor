@if(patient is null){
    <MudProgressCircular>Loading Patient</MudProgressCircular>
} else{
    ﻿<MudStack>
        <MudPaper Width="440px">
            <!-- Patient info Header -->
            <MudPaper Elevation="2" Class="pa-2 ma-2 --mud-palette-dark">
                <MudTextField @bind-Value="patient.LastName" Label="Last Name" />
                <MudTextField @bind-Value="patient.FirstName" Label="First Name" />
                <MudTextField @bind-Value="patient.Identifier" Label="Patient ID" />
            </MudPaper>
            @foreach (var group in Groups) {
                <MudPaper Elevation="0" MinHeight="80px" Class="pa-2 ma-4 d-flex flex-column mud-background-gray rounded-lg">
                    <MudToolBar DisableGutters="true" Class="@(group.EditName ? "mud-secondary pa-4 ma-n2" : "mud-primary pa-4 ma-n2")">
                        @if (group.EditName) {
                            <MudTextField @bind-Value="group.NewLabel" Placeholder="@group.Group.Label" Label="Edit Group Name"
                                  DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2" TextChanged="(() => OnTextFieldChangedHandler(group))" />
                        }
                        else {
                            <MudText Typo="Typo.subtitle1"><b>@group.Group.Label</b></MudText>
                        }
                        <MudSpacer />
                        <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                            <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="(()=> DeleteGroup(group))">Delete Section</MudButton>
                            <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit" OnClick="(()=> EditGroupName(group))">Rename Section</MudButton>
                        </MudMenu>
                    </MudToolBar>
                    <MudStack Class="pt-4">
                        <!-- Each task listing -->
                        @foreach (var task in group.Tasks) {
                            <MudToolBar Class="ma-n4">
                                <!-- to see if the task is open -->
                                @if (task.Edit) {
                                    <MudMenu Icon="@TypeToIcon(task.Task.Type)" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Outlined.CheckBox" OnClick=@(()=> {task.Task.Type = (int)TaskType.Bool; task.Task.Value = "false";})></MudButton>
                                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Filled.TextSnippet" OnClick=@(()=> {task.Task.Type = (int)TaskType.Text; task.Task.Value = string.Empty;})></MudButton>
                                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Filled.CalendarMonth" OnClick=@(()=> {task.Task.Type = (int)TaskType.Date; task.Task.Value = DateTime.Today.ToShortDateString();}) />
                                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Filled.List" OnClick=@(()=> {task.Task.Type = (int)TaskType.List; task.Task.Value = "0,Option 1,Option 2";}) />
                                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Filled.Numbers" OnClick=@(()=> {task.Task.Type = (int)TaskType.Number; task.Task.Value = "0.0";}) />
                                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Filled.Calculate" OnClick=@(()=> {task.Task.Type = (int)TaskType.Calculation; task.Task.Value = string.Empty;})></MudButton>
                                    </MudMenu>
                                    <MudTextField @bind-Value="task.NewLabel" Placeholder="@task.Task.Label" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"
                                        TextChanged="(() => EditTaskName(task))"></MudTextField>
                                    <MudSpacer />
                                    <MudIconButton Icon="@Icons.Material.Filled.Check" OnClick="(()=> {EditTaskName(task); task.Edit = false;})" Size="Size.Small" />
                                    <MudIconButton icon="@Icons.Material.Sharp.RemoveCircleOutline"
                                       Color="Color.Error" Size="Size.Small" OnClick="(()=> DeleteTask(group, task))" />
                                }
                                else {
                                    <!-- Normal Task View -->
                                    <MudIcon Icon="@TypeToIcon(task.Task.Type)" Size="Size.Small" Class="pr-1" />
                                    <MudText Typo="Typo.body1"><b>@task.Task.Label</b></MudText>
                                    <MudSpacer />
                                    <MudIconButton Icon="@Icons.Material.Sharp.Edit" OnClick="(()=> EditTask(task))" Size="Size.Small" />
                                    <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Size="Size.Small" OnClick="(()=> RaiseTask(task))" />
                                    <MudIconButton Icon="@Icons.Material.Sharp.KeyboardArrowDown" Size="Size.Small" OnClick="(()=> LowerTask(task))" />
                                    <MudIconButton icon="@Icons.Material.Sharp.RemoveCircleOutline"
                                       Color="Color.Error" Size="Size.Small" OnClick="(()=> DeleteTask(group, task))" />
                                }

                            </MudToolBar>
                        }
                        <!-- Add Task Section -->
                        @if (group.IsNewTaskOpen) {
                            <MudPaper Elevation="25" Class="pa-2 rounded-lg">
                                <MudToolBar Dense="true">
                                    <MudMenu Icon="@TypeToIcon(group.NewTaskType)" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Outlined.CheckBox" OnClick=@(()=> {group.NewTaskType = TaskType.Bool;})></MudButton>
                                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Filled.TextSnippet" OnClick=@(()=> {group.NewTaskType = TaskType.Text;})></MudButton>
                                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Filled.CalendarMonth" OnClick=@(()=> {group.NewTaskType = TaskType.Date;}) />
                                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Filled.List" OnClick=@(()=> {group.NewTaskType = TaskType.List;}) />
                                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Filled.Numbers" OnClick=@(()=> {group.NewTaskType = TaskType.Number;}) />
                                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Filled.Calculate" OnClick=@(()=> {group.NewTaskType = TaskType.Calculation;})></MudButton>
                                    </MudMenu>
                                    <MudTextField @bind-Value="group.NewTaskLabel" Placeholder="New Task" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"
                                        TextChanged="@(() => {if(!String.IsNullOrEmpty(group.NewTaskLabel)) { AddTaskItem(group); }})"></MudTextField>
                                </MudToolBar>
                                <MudButton OnClick="@(() => AddTaskItem(group))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Task</MudButton>
                                <MudButton OnClick="@(() => group.IsNewTaskOpen = false)" Size="Size.Small" Color="Color.Primary" FullWidth="true">Hide</MudButton>
                            </MudPaper>
                        }
                        else {
                            <MudButton OnClick="@(() => group.IsNewTaskOpen = true)" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
                        }
                    </MudStack>
                </MudPaper>
            }

            <MudPaper Class="pa-4" Elevation="0">
                @if (AddGroupOpen) {
                    <MudPaper Elevation="0" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
                        <EditForm Model="@NewTaskGroup" OnValidSubmit="OnValidSectionSubmit">
                            <DataAnnotationsValidator />
                            <MudTextField @bind-Value="NewTaskGroup.Label" For="@(() => NewTaskGroup.Label)" Placeholder="New Group" DisableUnderLine="true"></MudTextField>
                            <MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
                        </EditForm>
                    </MudPaper>
                }
                else {
                    <MudButton OnClick="(()=> AddGroupOpen = true)" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Group</MudButton>
                }
            </MudPaper>
            <MudPaper Elevation="2" Class="pa-2 ma-4 d-flex flex-1">
                <MudButton Variant="Variant.Filled" Class="ma-2 d-flex flex-1" OnClick="(() => CancelPatientEdit())"
                           Color="Color.Info" Size="Size.Small">Cancel</MudButton>
                <MudButton Variant="Variant.Filled" Class="ma-2 d-flex flex-1" OnClick="(() => ResetPatientData())"
                           Color="Color.Info" Size="Size.Small">Reset</MudButton>
                <MudButton Variant="Variant.Filled" Class="ma-2 d-flex flex-1" OnClick="(() => SavePatientData())"
                           Color="Color.Warning" Size="Size.Small">Save</MudButton>
            </MudPaper>

        </MudPaper>
    </MudStack>
}

@code {
    [Inject] IPatientService PatientService { get; set; }
    [Inject] NavigationManager NavManager { get; set; }
    [Parameter] public int PatientId { get; set; }

    //patient info
    Patient? patient { get; set; } = null;
    List<TaskGroupModifier> Groups { get; set; } = new();
    TaskGroup NewTaskGroup { get; set; } = new();

    //controls
    private bool AddGroupOpen { get; set; }

    private string TypeToIcon(TaskType type) => TypeToIcon((int)type);
    private string TypeToIcon(int type) {
        if (type == (int)TaskType.Bool) return Icons.Material.Outlined.CheckBox;
        if (type == (int)TaskType.Text) return Icons.Material.Filled.TextSnippet;
        if (type == (int)TaskType.Date) return Icons.Material.Filled.CalendarMonth;
        if (type == (int)TaskType.List) return Icons.Material.Filled.List;
        if (type == (int)TaskType.Number) return Icons.Material.Filled.Numbers;
        if (type == (int)TaskType.Calculation) return Icons.Material.Filled.Calculate;
        return Icons.Material.Filled.QuestionMark;
    }

    protected override async Task OnParametersSetAsync() {
        var response = await PatientService.GetPatient(PatientId);
        if(!response.Success || response.Data is null) return;

        patient = response.Data;

        Groups = new();

        foreach(var group in patient.TaskGroups){
            var modGroup = new TaskGroupModifier { Group = group, Tasks = new(), NewLabel = group.Label};
            foreach (var task in group.Tasks){
                modGroup.Tasks.Add(new TaskItemModifier { Task = task, Parent = modGroup, NewLabel = task.Label });
            }
            Groups.Add(modGroup);
        }
    }

    //task methods
    private void RaiseTask(TaskItemModifier task) {
        var index = task.Parent.Tasks.IndexOf(task);
        if (index == 0) return;

        task.Parent.Tasks.RemoveAt(index);
        task.Parent.Tasks.Insert(index - 1, task);
    }

    private void LowerTask(TaskItemModifier task) {
        var index = task.Parent.Tasks.IndexOf(task);
        if (index == task.Parent.Tasks.Count - 1) return;

        task.Parent.Tasks.RemoveAt(index);
        task.Parent.Tasks.Insert(index + 1, task);
    }

    private void DeleteTask(TaskGroupModifier group, TaskItemModifier task) {
        group.Tasks.Remove(task);
    }

    private void AddTaskItem(TaskGroupModifier group) {
        if (group.NewTaskLabel == null) return; //label is empty
        if (group.Tasks.FindAll(t => t.Task.Label == group.NewTaskLabel).Count() > 0) return; //if any tasks have the same label
        if (group.NewTaskType < 0) return; //didn't choose a proper type

        var task = new TaskItemModifier {
            Task = new TaskItem {
                Label = group.NewTaskLabel,
                Type = (int)group.NewTaskType
            },
            NewLabel = group.NewTaskLabel,
            Parent = group
        };

        group.IsNewTaskOpen = false;
        group.NewTaskLabel = string.Empty;
        group.NewTaskType = new();
        group.Tasks.Add(task);
    }

    private void EditTask(TaskItemModifier task) {
        task.Parent.Tasks.ForEach(t => t.Edit = false);

        task.Edit = true;
    }

    private void EditTaskName(TaskItemModifier task){
        if (task.Task.Label == task.NewLabel) return; //isn't a new value
        task.Task.Label = task.NewLabel;
        task.Edit = false;
    }

    //group methods
    private void EditGroupName(TaskGroupModifier group) {
        foreach(var g in Groups) g.EditName = false; //close all group name edits

        group.EditName = true;
    }

    private void OnTextFieldChangedHandler(TaskGroupModifier group) {
        if (group.Group.Label == group.NewLabel) return;
        group.Group.Label = group.NewLabel;
        group.EditName = false;
    }

    private void DeleteGroup(TaskGroupModifier group) {
        Groups.Remove(group);
    }

    private void OnValidSectionSubmit(EditContext context) {
        var group = new TaskGroup { Label = NewTaskGroup.Label, PatientId = patient.Id };
        Groups.Add(new TaskGroupModifier { Group = group, Tasks = new(), NewLabel = group.Label });
        NewTaskGroup.Label = string.Empty;
        AddGroupOpen = false;
    }

    //patient info
    private void CancelPatientEdit() => NavManager.NavigateTo($"/patients/{PatientId}");

    private async Task ResetPatientData() {
        await OnParametersSetAsync(); //reloads patient from server based on patient ID
    }

    private async Task SavePatientData() {

    }

    private class TaskGroupModifier {
        public bool Edit { get; set; } = false;
        public bool EditName { get; set; } = false;
        public bool IsNewTaskOpen { get; set; } = false;
        public string NewTaskLabel { get; set; } = string.Empty;
        public TaskType NewTaskType { get; set; }
        public string NewLabel { get; set; } = string.Empty;
        public TaskGroup Group {get;set;}
        public List<TaskItemModifier> Tasks { get; set; }
    }

    private class TaskItemModifier {
        public bool Edit { get; set; }
        public string NewLabel { get; set; } = string.Empty; 
        public TaskItem Task { get; set; }
        public TaskGroupModifier Parent { get; set; }
    }
}