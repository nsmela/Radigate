@if(patient is null){

}else{
    <MudPaper Class="mud-theme-primary pa-2 ml-2 mt-1 rounded-t-xl rounded-0" MinHeight="240px">
        <MudItem Class="d-flex justify-content-between">
            <MudItem>
                <MudText Typo="Typo.h1">@(patient.LastName.ToUpper() + ", " + patient.FirstName.ToUpper())</MudText>
                    <MudText Typo="Typo.h4">DUE: NO DATA</MudText>
                    <MudText Typo="Typo.h4">PHYSICIAN: N/A</MudText>
                </MudItem>
                <MudItem Style="transform:rotateZ(270deg);height:200px;" Class="d-flex flex-column justify-content-end mr-10">
                    <MudButton Variant="Variant.Outlined">History</MudButton>
                    <MudButton Variant="Variant.Outlined">Compare</MudButton>
                </MudItem>
            </MudItem>
        </MudPaper>

        <MudContainer Class="mt-n10 ml-6 d-flex flex-row" > 
        @foreach (var group in patient.TaskGroups) {
                <MudPaper Class="d-flex ma-2 pa-2 flex-column" Elevation="2" >
                    <MudText class="d-flex" Typo="Typo.h6">@group.Label</MudText>
                    <div style="min-width: 330px;">
                        <MudExpansionPanels DisableBorders="true" Dense="true">
                        @foreach (var task in group.Tasks) {
                                @switch (task.Type) {
                                <!-- CheckBox FIELD -->
                                case (int)TaskType.Bool:
                                    var check = task as TaskBool;    
                                    <MudPaper Class="d-flex justify-content-between mt-1" Outlined="true">
                                        <MudText Class="d-inline-flex align-self-center pl-2">@task.Label</MudText>
                                        <MudCheckBox T="bool" Checked="@check.Checked" 
                                            CheckedChanged="@((value) => {check.Checked = value; UpdatePatientTask(check, value ? "true" : "false");})"/>
                                    </MudPaper>
                                    break;
                                <!-- TEXT FIELD -->
                                case (int)TaskType.Text:
                                    var result = task as TaskText;
                                    <MudPaper Class="d-flex justify-content-between mt-1" Outlined="true">
                                        <MudText Class="d-inline-flex align-self-center px-2">@result.Label</MudText>
                                        <MudTextField Class="d-inline-flex align-self-center px-2 text-align-right"
                                            Style="margin-left:auto;padding-bottom:16px;height:24px;"
                                            Variant="Variant.Filled" DisableUnderLine="true" Margin="Margin.Dense"
                                            T="string" Text="@result.Text" TextChanged="@((value) => { if(result.Text !=value){ result.Text = value; UpdatePatientTask(result, value);}})" />
                                    </MudPaper>
                                    break;
                                <!-- NUMBER FIELD -->
                                case (int)TaskType.Number:
                                    var number = task as TaskNumber;
                                    <MudPaper Class="d-flex justify-content-between mt-1" Outlined="true" >
                                        <MudText Class="d-inline-flex align-self-center pl-2">@number.Label</MudText>
                                            <MudNumericField Class="d-inline-flex align-self-center px-2 text-align-right"
                                                 Style="text-align:right;padding-bottom:16px;height:24px;"
                                                 Variant="Variant.Filled" DisableUnderLine="true" Margin="Margin.Dense" 
                                                 HideSpinButtons="true" T="double" Value="@number.Number" 
                                                 ValueChanged="@((value) => {number.Number = value; UpdatePatientTask(number, value.ToString());})" />
                                    </MudPaper>
                                    break;
                                <!-- FORMULA FIELD -->
                                case (int)TaskType.Calculation:
                                    var formula = task as TaskCalculate;
                                    <MudExpansionPanel Class="mt-2" HideIcon="true" Dense="true" >
                                        <TitleContent>
                                                <MudPaper Class="d-flex justify-content-between ma-0" Outlined="true" >
                                                    <MudText Class="d-inline-flex align-self-center pl-2">@formula.Label</MudText>
                                                    <MudText Class="d-inline-flex align-self-center px-2 text-align-right"
                                                        Style="margin-left:auto;padding-bottom:16px;height:24px;"><b>NOT IMPLEMENTED</b></MudText>
                                                </MudPaper>
                                        </TitleContent>
                                        <ChildContent>
                                            <MudPaper Class="d-flex justify-content-between mt-1" Elevation="0">
                                                <MudText Class="d-inline-flex align-self-center px-2">Formula: </MudText>
                                                <MudTextField Class="d-inline-flex align-self-center px-2 text-align-right"
                                                    Style="text-align:right;padding-bottom:16px;height:24px;"
                                                    Variant="Variant.Filled" DisableUnderLine="true" Margin="Margin.Dense"
                                                    T="string" Text="@formula.Formula" 
                                                    TextChanged="@((value) => { if(formula.Formula !=value){ formula.Formula = value; UpdatePatientTask(formula, value);}})" />
                                            </MudPaper>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                    <!-- TODO: Add expansion panel to allow editing the values -->
                                    break;
                                <!-- DATE FIELD -->
                                case (int)TaskType.Date:
                                    var date = task as TaskDate;
                                    <MudPaper Class="d-flex justify-content-between mt-1" Outlined="true">
                                        <MudText Class="d-inline-flex flex-grow-1 align-self-center px-2 ">@date.Label</MudText>
                                        <MudDatePicker Class="d-inline-flex align-self-center px-2 text-align-right" AutoClose="true"
                                            Style="padding-bottom:12px;height:36px;width:200px" Margin="Margin.Dense" Variant="Variant.Filled" T="DateTime"
                                            Date="@date.Date" DateChanged="@((value) => { date.Date = value; UpdatePatientTask(date, value.Value.ToShortDateString());})"/>
                                    </MudPaper>
                                    break;
                                <!-- List FIELD -->
                                case (int)TaskType.List:
                                    var list = task as TaskList;
                                    <MudPaper Class="d-flex justify-content-between mt-1" Outlined="true">
                                        <MudText Class="d-inline-flex flex-grow-1 align-self-center px-2" T="string">@list.Label</MudText>
                                        <MudSelect Class="d-inline-flex flex-grow-1  px-2 pb-14" Style="height:40px;" TransformOrigin="Origin.CenterCenter"
                                            T="string" Value="@list.SelectedOption" 
                                            ValueChanged="@((value) => { list.SelectedOption = value; UpdatePatientTask(list, list.ValueString);})">
                                            @foreach (var option in list.Options) {
                                                <MudSelectItem Value="@(option)">@option</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudPaper>
                                    break;
                                <!-- UNDEFINED -->
                                default:
                                    <MudExpansionPanel Class="mt-2" HideIcon="true" Dense="true" >
                                        <TitleContent>
                                                <MudPaper Class="d-flex justify-content-between ma-0" Outlined="true" >
                                                    <MudText Class="d-inline-flex align-self-center pl-2">@task.Label</MudText>
                                                    <MudCheckBox T="bool" />
                                                </MudPaper>
                                        </TitleContent>
                                        <ChildContent>
                                            <MudPaper Class="d-flex flex-column align-items-stretch pa-1">
                                                <MudText>Last Edit: 01-JAN-2023</MudText>
                                                <MudTextField T="string" Variant="Variant.Outlined" Label="Comments" Lines="5"></MudTextField>
                                            </MudPaper>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                    break;
                                }
                            }
                        </MudExpansionPanels>
                    </div>
                </MudPaper>
        }

    </MudContainer>
    }
<style>
    .text-align-right input{
        text-align: right;
    }
</style>



@code {
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] private IPatientService PatientService { get; set; }
    [Inject] private ITaskService TaskService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    [Parameter] public int PatientId { get; set; }

    Patient? patient = null;

    protected override async Task OnParametersSetAsync() {
        var response = await PatientService.GetPatient(PatientId);

        if(response.Success){
            patient = response.Data;
        }
    }

    private async Task UpdatePatientTask(TaskItem task, string value) {
        await TaskService.UpdateTaskValue(task, value);
    }

    private async Task DeletePatient() {
    }

    private async Task EditPatient() {
        NavigationManager.NavigateTo($"patients/edit/{PatientId}");
    }

}