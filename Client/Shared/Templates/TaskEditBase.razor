﻿@if (!Editing) {
    <MudToolBar Class="pa-2 ma-1" DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken3};")">
        <MudIcon Icon="@Icon" Size="Size.Small" />
        <MudText Typo="Typo.body1" Class="pl-2">@Task.Label</MudText>
    </MudToolBar>
}
else {
    @if (true) {
        <MudToolBar Row="true" Class="pa-2 ma-1" DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken3};")">
            <MudIcon Icon="@Icon" Size="Size.Small" />
            <MudInput @bind-Value="Task.Label" Placeholder="@Task.Label" Margin="Margin.Normal" Class="mb-n2 mt-n2 pr-8n pl-1 pt-1"
              Variant="Variant.Filled" Immediate="false" TextChanged=@(()=> SubmitTaskEdit()) FullWidth="true" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Rounded.Edit" Size="Size.Small" OnClick=@(()=> SubmitTaskEdit()) />
            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.RemoveCircle" Size="Size.Small" Class="pl-4 invisible" />
        </MudToolBar>
    }
    else {
        <MudToolBar Class="pa-2 ma-1" DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken3};")">
            <MudMenu Dense="true">
                <ActivatorContent>
                    <MudChip Icon="@Icon" Size="Size.Small" Color="Color.Primary" />
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Icon="@Icons.Material.Filled.CheckBox" Size="Size.Small" OnClick="@(()=> SelectType(0))">Checkbox</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.TextSnippet" Size="Size.Small" OnClick="@(()=> SelectType(1))">Text</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.List" Size="Size.Small" OnClick="@(()=> SelectType(2))">Dropbox</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.CalendarMonth" Size="Size.Small" OnClick="@(()=> SelectType(3))">Date</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.Numbers" Size="Size.Small" OnClick="@(()=> SelectType(4))">Number</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.Calculate" Size="Size.Small" OnClick="@(()=> SelectType(5))">Calculate</MudMenuItem>
                </ChildContent>
            </MudMenu>
            <MudText Typo="Typo.body1" Class="pl-2">@Task.Label</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Size="Size.Small" OnClick="(() => IncrementTask())" />
            <MudIconButton Icon="@Icons.Material.Sharp.KeyboardArrowDown" Size="Size.Small" OnClick="(() => DecrementTask())" />
            <MudIconButton Icon="@Icons.Material.Rounded.Edit" Size="Size.Small" OnClick="@(()=> EditTask())" />
            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.RemoveCircle" Size="Size.Small" Class="pl-4" OnClick="(() => RemoveTask())" />
        </MudToolBar>
    }
}
@code {
    [Parameter] public TaskItem Task { get; set; }
    [Parameter] public bool Editing { get; set; } = false;
    [Parameter] public EventCallback<TaskGroup> GroupChanged { get; set; }

    bool editMode = false; //used to prevent the text field from exiting immediately when using TextChanged event handler

    string Icon => TaskTypeExtensions.ToIcon((TaskType)Task.Type);
    TaskGroup Group { get => Task.TaskGroup; set => Task.TaskGroup = value; }

    #region Button Functions

    async Task SelectType(int index) {
        Task.Type = index;

        await GroupChanged.InvokeAsync(Group);
    }


    async Task IncrementTask() {

    }

    async Task DecrementTask() {

    }

    async Task RemoveTask() {
        Group.Tasks.Remove(Task);
        await GroupChanged.InvokeAsync(Group);
    }

    async Task EditTask() {

    }

    async Task SubmitTaskEdit() {

    }

    #endregion

}