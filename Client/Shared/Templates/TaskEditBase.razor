﻿@if (!Editing) {
    <MudToolBar Class="pa-2 ma-1" DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken3};")">
        <MudIcon Icon="@Icon" Size="Size.Small" />
        <MudText Typo="Typo.body1" Class="pl-2">@Label</MudText>
    </MudToolBar>
}
else {
    @if (false) {
        <MudToolBar Row="true" Class="pa-2 ma-1" DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken3};")">
            <MudIcon Icon="@Icon" Size="Size.Small" />
            <MudInput @bind-Value="Label" Placeholder="@Label" Margin="Margin.Normal" Class="mb-n2 mt-n2 pr-8n pl-1 pt-1"
              Variant="Variant.Filled" Immediate="false" TextChanged=@(()=> SubmitTaskEdit()) FullWidth="true" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Rounded.Edit" Size="Size.Small" OnClick=@(()=> SubmitTaskEdit()) />
            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.RemoveCircle" Size="Size.Small" Class="pl-4 invisible" />
        </MudToolBar>
    }
    else {
        <MudToolBar Class="pa-2 ma-1" DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken3};")">
            <MudMenu Dense="true">
                <ActivatorContent>
                    <MudChip Icon="@Icon" Size="Size.Small" Color="Color.Default" />
                </ActivatorContent>
                <ChildContent>
                    @foreach(var type in TaskTypes){
                        <MudMenuItem Icon="@TaskToIcon(type)" Size="Size.Small" OnClick="@(()=> SelectType(type))">@TaskToLabel(type)</MudMenuItem>
                    }
                </ChildContent>
            </MudMenu>
            <MudInput @bind-Value="Label" Placeholder="@Label" Margin="Margin.Normal" Class="mb-n2 mt-n2 pr-8n pl-1 pt-1"
                Variant="Variant.Filled" Immediate="false" TextChanged=@(()=> SubmitTaskEdit()) FullWidth="true" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Size="Size.Small" OnClick="(() => IncrementTask())" />
            <MudIconButton Icon="@Icons.Material.Sharp.KeyboardArrowDown" Size="Size.Small" OnClick="(() => DecrementTask())" />
            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.RemoveCircle" Size="Size.Small" OnClick="@RemoveTask" />
        </MudToolBar>
    }
}
@code {
    [Parameter] 
    public Tuple<string, int>? Task { get; set; }
    [Parameter] 
    public GroupTemplate? Group {get;set;}
    [Parameter] 
    public bool Editing { get; set; } = false;
    [Parameter]
    public EventCallback<GroupTemplate> GroupChanged { get; set; } = new();

    protected override async Task OnParametersSetAsync() {
        if (Task is null) return;

        Label = Task.Item1;
        Type = (TaskType)int.Parse(Task.Item2.ToString());
    }

    string Label { get; set; } = string.Empty;
    TaskType Type { get; set; } = TaskType.Base;

    bool editMode = false; //used to prevent the text field from exiting immediately when using TextChanged event handler

    string Icon => TaskTypeExtensions.ToIcon(Type);

    private TaskType[] TaskTypes => ((TaskType[]) Enum.GetValues(typeof(TaskType))).SkipLast(1).ToArray(); //last entry is Base, a count type
    private string TaskToIcon(TaskType type) => TaskTypeExtensions.ToIcon(type);
    private string TaskToLabel(TaskType type) => Enum.GetName(typeof(TaskType), type);

    #region Button Functions
    async Task SelectType(TaskType type) {
        Type = type;
        await GroupChanged.InvokeAsync(Group);
    }


    async Task IncrementTask() {
        await GroupChanged.InvokeAsync(Group);
    }

    async Task DecrementTask() {
        await GroupChanged.InvokeAsync(Group);
    }

    async Task RemoveTask() {
        var tasks = Group.TaskList();
        tasks.Remove(Task);
        Group.Tasks = GroupTemplate.TasksToString(tasks);

        await GroupChanged.InvokeAsync(Group);
    }

    async Task EditTask() {

    }

    async Task SubmitTaskEdit() {
        var tasks = Group.TaskList();
        var taskIndex = tasks.IndexOf(Task);
        tasks[taskIndex] = new Tuple<string, int>(Label, (int)Type);
        Group.Tasks = GroupTemplate.TasksToString(tasks);

        GroupChanged.InvokeAsync();
    }

    #endregion

}